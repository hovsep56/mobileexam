function rgbToHex(r, g, b) {
    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

function rgbToHsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
  
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;
  
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
  
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
  
      h /= 6;
    }
  
    return {"h":h,"s":s,"l":l};
  }

module.exports = function(len,type,pastel){

    var eq1 = 127
    var eq2 = 128 
    if (len == undefined) {len = 24};
    if (type == undefined) {type = "rgb"};
    if (pastel == true) {eq1 = 55; eq2 = 200};
  frequency = Math.PI*2/len;
  
var cvparr = [];
  for (var i = 0; i < len; ++i)
  {
     red   = Math.sin(frequency*i+2) * eq1 + eq2
     green = Math.sin(frequency*i+0) * eq1 + eq2
     blue  = Math.sin(frequency*i+4) * eq1 + eq2

switch(type){
    case "hex":
cvparr.push({"hex":rgbToHex(Math.round(red),Math.round(green),Math.round(blue))});
break;
    case "rgb":
cvparr.push({"r":red,"g":green,"b":blue});
break;
case "hsl":
cvparr.push(rgbToHsl(Math.round(red),Math.round(green),Math.round(blue)));
break;
}

  }
return cvparr;
}

